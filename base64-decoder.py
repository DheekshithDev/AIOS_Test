import base64

def save_file_from_base64(encoded_str: str, filename: str):
    """
    Decode a base64 string and save it as a file.
    
    Args:
        encoded_str (str): The base64 string (your DB content).
        filename (str): The output file name, e.g. "config.json", "script.py", "notes.txt".
    """
    # Decode
    decoded_bytes = base64.b64decode(encoded_str)
    
    # Write to file
    with open(filename, "wb") as f:
        f.write(decoded_bytes)
    print(f"Saved: {filename}")

# Example usage
b64_str = """aW1wb3J0IGltcG9ydGxpYgoKaW1wb3J0IG9zCmltcG9ydCB0aW1lCgpmcm9tIGFpb3MuaG9va3MucmVxdWVzdCBpbXBvcnQgc2VuZF9yZXF1ZXN0Cgpmcm9tIHB5b3BlbmFnaS51dGlscy5jaGF0X3RlbXBsYXRlIGltcG9ydCBRdWVyeQoKZnJvbSBweW9wZW5hZ2kudXRpbHMubG9nZ2VyIGltcG9ydCBBZ2VudExvZ2dlcgoKaW1wb3J0IGpzb24KCmltcG9ydCBpbXBvcnRsaWIKCmltcG9ydCBvcwppbXBvcnQgdGltZQoKZnJvbSBhaW9zLmhvb2tzLnJlcXVlc3QgaW1wb3J0IHNlbmRfcmVxdWVzdAoKZnJvbSBweW9wZW5hZ2kudXRpbHMuY2hhdF90ZW1wbGF0ZSBpbXBvcnQgUXVlcnkKCmZyb20gcHlvcGVuYWdpLnV0aWxzLmxvZ2dlciBpbXBvcnQgQWdlbnRMb2dnZXIKCmltcG9ydCBqc29uCgpjbGFzcyBBY2FkZW1pY0FnZW50OgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFnZW50X25hbWUsIHRhc2tfaW5wdXQsIGxvZ19tb2RlOiBzdHIpOgogICAgICAgIHNlbGYuYWdlbnRfbmFtZSA9IGFnZW50X25hbWUKICAgICAgICBzZWxmLmNvbmZpZyA9IHNlbGYubG9hZF9jb25maWcoKQogICAgICAgIHNlbGYudG9vbF9uYW1lcyA9IHNlbGYuY29uZmlnWyJ0b29scyJdCiAgICAgICAgCiAgICAgICAgc2VsZi5wbGFuX21heF9mYWlsX3RpbWVzID0gMwogICAgICAgIHNlbGYudG9vbF9jYWxsX21heF9mYWlsX3RpbWVzID0gMwoKICAgICAgICAjIHNlbGYuYWdlbnRfcHJvY2Vzc19mYWN0b3J5ID0gYWdlbnRfcHJvY2Vzc19mYWN0b3J5CgogICAgICAgIHNlbGYudG9vbF9saXN0ID0gZGljdCgpCiAgICAgICAgc2VsZi50b29scyA9IFtdCiAgICAgICAgc2VsZi50b29sX2luZm8gPSAoCiAgICAgICAgICAgIFtdCiAgICAgICAgKSAgIyBzaW1wbGlmaWVkIGluZm9ybWF0aW9uIG9mIHRoZSB0b29sOiB7Im5hbWUiOiAieHh4IiwgImRlc2NyaXB0aW9uIjogInh4eCJ9CgogICAgICAgIHNlbGYubG9hZF90b29scyhzZWxmLnRvb2xfbmFtZXMpCgogICAgICAgIHNlbGYuc3RhcnRfdGltZSA9IE5vbmUKICAgICAgICBzZWxmLmVuZF90aW1lID0gTm9uZQogICAgICAgIHNlbGYucmVxdWVzdF93YWl0aW5nX3RpbWVzOiBsaXN0ID0gW10KICAgICAgICBzZWxmLnJlcXVlc3RfdHVybmFyb3VuZF90aW1lczogbGlzdCA9IFtdCiAgICAgICAgc2VsZi50YXNrX2lucHV0ID0gdGFza19pbnB1dAogICAgICAgIHNlbGYubWVzc2FnZXMgPSBbXQogICAgICAgICMgc2VsZi53b3JrZmxvd19tb2RlID0gIm1hbnVhbCIgICMgKG1hbm51YWwsIGF1dG9tYXRpYykKICAgICAgICBzZWxmLndvcmtmbG93X21vZGUgPSAiYXV0b21hdGljIgogICAgICAgIHNlbGYucm91bmRzID0gMAoKICAgICAgICBzZWxmLmxvZ19tb2RlID0gbG9nX21vZGUKICAgICAgICBzZWxmLmxvZ2dlciA9IHNlbGYuc2V0dXBfbG9nZ2VyKCkKCiAgICAgICAgc2VsZi5zZXRfc3RhdHVzKCJhY3RpdmUiKQogICAgICAgIHNlbGYuc2V0X2NyZWF0ZWRfdGltZSh0aW1lLnRpbWUoKSkKCiAgICBkZWYgY2hlY2tfd29ya2Zsb3coc2VsZiwgbWVzc2FnZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIHByaW50KGYiV29ya2Zsb3cgbWVzc2FnZToge21lc3NhZ2V9IikKICAgICAgICAgICAgd29ya2Zsb3cgPSBqc29uLmxvYWRzKG1lc3NhZ2UpCiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHdvcmtmbG93LCBsaXN0KToKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgICAgICAgICBmb3Igc3RlcCBpbiB3b3JrZmxvdzoKICAgICAgICAgICAgICAgIGlmICJhY3Rpb25fdHlwZSIgbm90IGluIHN0ZXAgb3IgImFjdGlvbiIgbm90IGluIHN0ZXAgb3IgInRvb2xfdXNlIiBub3QgaW4gc3RlcDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgcmV0dXJuIHdvcmtmbG93CgogICAgICAgIGV4Y2VwdCBqc29uLkpTT05EZWNvZGVFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgY2hlY2tfcGF0aChzZWxmLCB0b29sX2NhbGxzKToKICAgICAgICBzY3JpcHRfcGF0aCA9IG9zLnBhdGguYWJzcGF0aChfX2ZpbGVfXykKICAgICAgICBzYXZlX2RpciA9IG9zLnBhdGguam9pbigKICAgICAgICAgICAgb3MucGF0aC5kaXJuYW1lKHNjcmlwdF9wYXRoKSwgIm91dHB1dCIKICAgICAgICApICAjIG1vZGlmeSB0aGUgY3VzdG9taXplZCBvdXRwdXQgcGF0aCBmb3Igc2F2aW5nIG91dHB1dHMKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoc2F2ZV9kaXIpOgogICAgICAgICAgICBvcy5tYWtlZGlycyhzYXZlX2RpcikKICAgICAgICBmb3IgdG9vbF9jYWxsIGluIHRvb2xfY2FsbHM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGZvciBrIGluIHRvb2xfY2FsbFsicGFyYW1ldGVycyJdOgogICAgICAgICAgICAgICAgICAgIGlmICJwYXRoIiBpbiBrOgogICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gdG9vbF9jYWxsWyJwYXJhbWV0ZXJzIl1ba10KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHBhdGguc3RhcnRzd2l0aChzYXZlX2Rpcik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sX2NhbGxbInBhcmFtZXRlcnMiXVtrXSA9IG9zLnBhdGguam9pbigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlX2Rpciwgb3MucGF0aC5iYXNlbmFtZShwYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICByZXR1cm4gdG9vbF9jYWxscwoKICAgIGRlZiBidWlsZF9zeXN0ZW1faW5zdHJ1Y3Rpb24oc2VsZik6CiAgICAgICAgcHJlZml4ID0gIiIuam9pbigKICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgIiIuam9pbihzZWxmLmNvbmZpZ1siZGVzY3JpcHRpb24iXSkKICAgICAgICAgICAgXQogICAgICAgICkKCiAgICAgICAgcGxhbl9pbnN0cnVjdGlvbiA9ICIiLmpvaW4oCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIGYnWW91IGFyZSBnaXZlbiB0aGUgYXZhaWxhYmxlIHRvb2xzIGZyb20gdGhlIHRvb2wgbGlzdDoge2pzb24uZHVtcHMoc2VsZi50b29sX2luZm8pfSB0byBoZWxwIHlvdSBzb2x2ZSBwcm9ibGVtcy4gJywKICAgICAgICAgICAgICAgICdHZW5lcmF0ZSBhIHBsYW4gd2l0aCBjb21wcmVoZW5zaXZlIHlldCBtaW5pbWFsIHN0ZXBzIHRvIGZ1bGZpbGwgdGhlIHRhc2suICcsCiAgICAgICAgICAgICAgICAnVGhlIHBsYW4gbXVzdCBmb2xsb3cgdGhlIGpzb24gZm9ybWF0IGFzIGJlbG93OiAnLAogICAgICAgICAgICAgICAgJ1snLAogICAgICAgICAgICAgICAgJ3siYWN0aW9uX3R5cGUiOiAiIiwgImFjdGlvbiI6ICIiLCJ0b29sX3VzZSI6IFtdfScsCiAgICAgICAgICAgICAgICAneyJhY3Rpb25fdHlwZSI6ICIiLCAiYWN0aW9uIjogIiIsICJ0b29sX3VzZSI6IFtdfScsCiAgICAgICAgICAgICAgICAnLi4uJywKICAgICAgICAgICAgICAgICddJywKICAgICAgICAgICAgICAgICdJbiBlYWNoIHN0ZXAgb2YgdGhlIHBsYW5uZWQgcGxhbiwgaWRlbnRpZnkgdG9vbHMgdG8gdXNlIGFuZCByZWNvZ25pemUgbm8gdG9vbCBpcyBuZWNlc3NhcnkuICcsCiAgICAgICAgICAgICAgICAnRm9sbG93aW5ncyBhcmUgc29tZSBwbGFuIGV4YW1wbGVzLiAnLAogICAgICAgICAgICAgICAgJ1snCiAgICAgICAgICAgICAgICAnWycsCiAgICAgICAgICAgICAgICAneyJhY3Rpb25fdHlwZSI6ICJjYWxsX3Rvb2wiLCAiYWN0aW9uIjogImdhdGhlciBpbmZvcm1hdGlvbiBmcm9tIGFyeGl2LiAiLCAidG9vbF91c2UiOiBbImFyeGl2Il19LCcsCiAgICAgICAgICAgICAgICAneyJhY3Rpb25fdHlwZSI6ICJtZXNzYWdlX2xsbSIsICJhY3Rpb24iOiAid3JpdGUgYSBzdW1tYXJpemF0aW9uIGJhc2VkIG9uIHRoZSBnYXRoZXJlZCBpbmZvcm1hdGlvbi4gIiwgInRvb2xfdXNlIjogW119JywKICAgICAgICAgICAgICAgICddOycsCiAgICAgICAgICAgICAgICAnWycsCiAgICAgICAgICAgICAgICAneyJhY3Rpb25fdHlwZSI6ICJjYWxsX3Rvb2wiLCAiYWN0aW9uIjogImdhdGhlciBpbmZvcm1hdGlvbiBmcm9tIGFyeGl2LiAiLCAidG9vbF91c2UiOiBbImFyeGl2Il19LCcsCiAgICAgICAgICAgICAgICAneyJhY3Rpb25fdHlwZSI6ICJjYWxsX3Rvb2wiLCAiYWN0aW9uIjogInVuZGVyc3RhbmQgdGhlIGN1cnJlbnQgbWV0aG9kcyBhbmQgcHJvcG9zZSBpZGVhcyB0aGF0IGNhbiBpbXByb3ZlICIsICJ0b29sX3VzZSI6IFtdfScsCiAgICAgICAgICAgICAgICAnXScsCiAgICAgICAgICAgICAgICAnXScKICAgICAgICAgICAgXQogICAgICAgICkKCiAgICAgICAgaWYgc2VsZi53b3JrZmxvd19tb2RlID09ICJtYW51YWwiOgogICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLmFwcGVuZCgKICAgICAgICAgICAgICAgIHsicm9sZSI6ICJzeXN0ZW0iLCAiY29udGVudCI6IHByZWZpeH0KICAgICAgICAgICAgKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICBhc3NlcnQgc2VsZi53b3JrZmxvd19tb2RlID09ICJhdXRvbWF0aWMiCiAgICAgICAgICAgIHNlbGYubWVzc2FnZXMuYXBwZW5kKAogICAgICAgICAgICAgICAgeyJyb2xlIjogInN5c3RlbSIsICJjb250ZW50IjogcHJlZml4ICsgcGxhbl9pbnN0cnVjdGlvbn0KICAgICAgICAgICAgKQogICAgICAgICAgICAjIHNlbGYubWVzc2FnZXMuYXBwZW5kKAogICAgICAgICAgICAjICAgICB7InJvbGUiOiAidXNlciIsICJjb250ZW50IjogcGxhbl9pbnN0cnVjdGlvbn0KICAgICAgICAgICAgIyApCiAgICAgICAgICAgIAogICAgZGVmIGF1dG9tYXRpY193b3JrZmxvdyhzZWxmKToKICAgICAgICBmb3IgaSBpbiByYW5nZShzZWxmLnBsYW5fbWF4X2ZhaWxfdGltZXMpOgogICAgICAgICAgICByZXNwb25zZSwgc3RhcnRfdGltZXMsIGVuZF90aW1lcywgd2FpdGluZ190aW1lcywgdHVybmFyb3VuZF90aW1lcyA9IHNlbmRfcmVxdWVzdCgKICAgICAgICAgICAgICAgIGFnZW50X25hbWUgPSBzZWxmLmFnZW50X25hbWUsCiAgICAgICAgICAgICAgICBxdWVyeT1RdWVyeSgKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcz1zZWxmLm1lc3NhZ2VzLCB0b29scz1Ob25lLCBtZXNzYWdlX3JldHVybl90eXBlPSJqc29uIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApCgogICAgICAgICAgICBpZiBzZWxmLnJvdW5kcyA9PSAwOgogICAgICAgICAgICAgICAgc2VsZi5zZXRfc3RhcnRfdGltZShzdGFydF90aW1lc1swXSkKCiAgICAgICAgICAgIHNlbGYucmVxdWVzdF93YWl0aW5nX3RpbWVzLmV4dGVuZCh3YWl0aW5nX3RpbWVzKQogICAgICAgICAgICBzZWxmLnJlcXVlc3RfdHVybmFyb3VuZF90aW1lcy5leHRlbmQodHVybmFyb3VuZF90aW1lcykKCiAgICAgICAgICAgIHdvcmtmbG93ID0gc2VsZi5jaGVja193b3JrZmxvdyhyZXNwb25zZS5yZXNwb25zZV9tZXNzYWdlKQoKICAgICAgICAgICAgc2VsZi5yb3VuZHMgKz0gMQoKICAgICAgICAgICAgaWYgd29ya2Zsb3c6CiAgICAgICAgICAgICAgICByZXR1cm4gd29ya2Zsb3cKCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJyb2xlIjogImFzc2lzdGFudCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogZiJGYWlsIHtpKzF9IHRpbWVzIHRvIGdlbmVyYXRlIGEgdmFsaWQgcGxhbi4gSSBuZWVkIHRvIHJlZ2VuZXJhdGUgYSBwbGFuIiwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgcmV0dXJuIE5vbmUKICAgIAogICAgZGVmIG1hbnVhbF93b3JrZmxvdyhzZWxmKToKICAgICAgICB3b3JrZmxvdyA9IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImFjdGlvbl90eXBlIjogImNhbGxfdG9vbCIsCiAgICAgICAgICAgICAgICAiYWN0aW9uIjogIlNlYXJjaCBmb3IgcmVsZXZhbnQgcGFwZXJzIiwKICAgICAgICAgICAgICAgICJ0b29sX3VzZSI6IFsiYXJ4aXYiXSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImFjdGlvbl90eXBlIjogIm1lc3NhZ2VfbGxtIiwKICAgICAgICAgICAgICAgICJhY3Rpb24iOiAiUHJvdmlkZSByZXNwb25zZXMgYmFzZWQgb24gdGhlIHVzZXIncyBxdWVyeSIsCiAgICAgICAgICAgICAgICAidG9vbF91c2UiOiBbXSwKICAgICAgICAgICAgfQogICAgICAgIF0KICAgICAgICByZXR1cm4gd29ya2Zsb3cKCiAgICBkZWYgY2FsbF90b29scyhzZWxmLCB0b29sX2NhbGxzKToKICAgICAgICAjIHNlbGYubG9nZ2VyLmxvZyhmIioqKioqIEl0IHN0YXJ0cyB0byBjYWxsIGV4dGVybmFsIHRvb2xzICoqKioqXG4iLCBsZXZlbD0iaW5mbyIpCiAgICAgICAgc3VjY2VzcyA9IFRydWUKICAgICAgICBhY3Rpb25zID0gW10KICAgICAgICBvYnNlcnZhdGlvbnMgPSBbXQoKICAgICAgICAjIHByaW50KHRvb2xfY2FsbHMpCiAgICAgICAgZm9yIHRvb2xfY2FsbCBpbiB0b29sX2NhbGxzOgogICAgICAgICAgICAjIHByaW50KHRvb2xfY2FsbCkKICAgICAgICAgICAgZnVuY3Rpb25fbmFtZSA9IHRvb2xfY2FsbFsibmFtZSJdCiAgICAgICAgICAgIGZ1bmN0aW9uX3RvX2NhbGwgPSBzZWxmLnRvb2xfbGlzdFtmdW5jdGlvbl9uYW1lXQogICAgICAgICAgICBmdW5jdGlvbl9wYXJhbXMgPSB0b29sX2NhbGxbInBhcmFtZXRlcnMiXQoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVuY3Rpb25fcmVzcG9uc2UgPSBmdW5jdGlvbl90b19jYWxsLnJ1bihmdW5jdGlvbl9wYXJhbXMpCiAgICAgICAgICAgICAgICBhY3Rpb25zLmFwcGVuZChmIkkgd2lsbCBjYWxsIHRoZSB7ZnVuY3Rpb25fbmFtZX0gd2l0aCB0aGUgcGFyYW1zIGFzIHtmdW5jdGlvbl9wYXJhbXN9IikKICAgICAgICAgICAgICAgIG9ic2VydmF0aW9ucy5hcHBlbmQoZiJUaGUgb3V0cHV0IG9mIGNhbGxpbmcgdGhlIHtmdW5jdGlvbl9uYW1lfSB0b29sIGlzOiB7ZnVuY3Rpb25fcmVzcG9uc2V9IikKCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBhY3Rpb25zLmFwcGVuZCgiSSBmYWlsIHRvIGNhbGwgYW55IHRvb2xzLiIpCiAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbnMuYXBwZW5kKGYiVGhlIHRvb2wgcGFyYW1ldGVyIHtmdW5jdGlvbl9wYXJhbXN9IGlzIGludmFsaWQuIikKICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSBGYWxzZQoKICAgICAgICByZXR1cm4gYWN0aW9ucywgb2JzZXJ2YXRpb25zLCBzdWNjZXNzCiAgICAKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgc2VsZi5idWlsZF9zeXN0ZW1faW5zdHJ1Y3Rpb24oKQoKICAgICAgICB0YXNrX2lucHV0ID0gc2VsZi50YXNrX2lucHV0CgogICAgICAgIHNlbGYubWVzc2FnZXMuYXBwZW5kKHsicm9sZSI6ICJ1c2VyIiwgImNvbnRlbnQiOiB0YXNrX2lucHV0fSkKICAgICAgICBzZWxmLmxvZ2dlci5sb2coZiJ7dGFza19pbnB1dH1cbiIsIGxldmVsPSJpbmZvIikKCiAgICAgICAgd29ya2Zsb3cgPSBOb25lCgogICAgICAgIGlmIHNlbGYud29ya2Zsb3dfbW9kZSA9PSAiYXV0b21hdGljIjoKICAgICAgICAgICAgd29ya2Zsb3cgPSBzZWxmLmF1dG9tYXRpY193b3JrZmxvdygpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYXNzZXJ0IHNlbGYud29ya2Zsb3dfbW9kZSA9PSAibWFudWFsIgogICAgICAgICAgICB3b3JrZmxvdyA9IHNlbGYubWFudWFsX3dvcmtmbG93KCkKCiAgICAgICAgc2VsZi5tZXNzYWdlcyA9IHNlbGYubWVzc2FnZXNbOjFdICAjIGNsZWFyIGxvbmcgY29udGV4dAoKICAgICAgICBzZWxmLm1lc3NhZ2VzLmFwcGVuZCgKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInJvbGUiOiAidXNlciIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IGYiUHJvYmxlbToge3Rhc2tfaW5wdXR9LiBUaGUgd29ya2Zsb3cgZ2VuZXJhdGVkIGZvciB0aGUgcHJvYmxlbSBpcyB7anNvbi5kdW1wcyh3b3JrZmxvdyl9LiBGb2xsb3cgdGhlIHdvcmtmbG93IHRvIHNvbHZlIHRoZSBwcm9ibGVtIHN0ZXAgYnkgc3RlcC4gIiwKICAgICAgICAgICAgfQogICAgICAgICkKCiAgICAgICAgaWYgd29ya2Zsb3c6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmxvZyhmIkdlbmVyYXRlZCB3b3JrZmxvdyBpczoge3dvcmtmbG93fVxuIiwgbGV2ZWw9ImluZm8iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmxvZygKICAgICAgICAgICAgICAgICJGYWlsIHRvIGdlbmVyYXRlIGEgdmFsaWQgd29ya2Zsb3cuIEludmFsaWQgSlNPTj9cbiIsIGxldmVsPSJpbmZvIgogICAgICAgICAgICApCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiB3b3JrZmxvdzoKICAgICAgICAgICAgICAgIGZpbmFsX3Jlc3VsdCA9ICIiCgogICAgICAgICAgICAgICAgZm9yIGksIHN0ZXAgaW4gZW51bWVyYXRlKHdvcmtmbG93KToKICAgICAgICAgICAgICAgICAgICBhY3Rpb25fdHlwZSA9IHN0ZXBbImFjdGlvbl90eXBlIl0KICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBzdGVwWyJhY3Rpb24iXQogICAgICAgICAgICAgICAgICAgIHRvb2xfdXNlID0gc3RlcFsidG9vbF91c2UiXQoKICAgICAgICAgICAgICAgICAgICBwcm9tcHQgPSBmIkF0IHN0ZXAge2kgKyAxfSwgeW91IG5lZWQgdG86IHthY3Rpb259LiAiCiAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5hcHBlbmQoeyJyb2xlIjogInVzZXIiLCAiY29udGVudCI6IHByb21wdH0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgdG9vbF91c2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX3Rvb2xzID0gc2VsZi5wcmVfc2VsZWN0X3Rvb2xzKHRvb2xfdXNlKQoKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF90b29scyA9IE5vbmUKCiAgICAgICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRfdGltZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZF90aW1lcywKICAgICAgICAgICAgICAgICAgICAgICAgd2FpdGluZ190aW1lcywKICAgICAgICAgICAgICAgICAgICAgICAgdHVybmFyb3VuZF90aW1lcywKICAgICAgICAgICAgICAgICAgICApID0gc2VuZF9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICAgICBhZ2VudF9uYW1lPXNlbGYuYWdlbnRfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk9UXVlcnkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcz1zZWxmLm1lc3NhZ2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHM9c2VsZWN0ZWRfdG9vbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25fdHlwZT1hY3Rpb25fdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5yb3VuZHMgPT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRfc3RhcnRfdGltZShzdGFydF90aW1lc1swXSkKCiAgICAgICAgICAgICAgICAgICAgIyBleGVjdXRlIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlX21lc3NhZ2UgPSByZXNwb25zZS5yZXNwb25zZV9tZXNzYWdlCgogICAgICAgICAgICAgICAgICAgIHRvb2xfY2FsbHMgPSByZXNwb25zZS50b29sX2NhbGxzCgogICAgICAgICAgICAgICAgICAgIHNlbGYucmVxdWVzdF93YWl0aW5nX3RpbWVzLmV4dGVuZCh3YWl0aW5nX3RpbWVzKQogICAgICAgICAgICAgICAgICAgIHNlbGYucmVxdWVzdF90dXJuYXJvdW5kX3RpbWVzLmV4dGVuZCh0dXJuYXJvdW5kX3RpbWVzKQoKICAgICAgICAgICAgICAgICAgICBpZiB0b29sX2NhbGxzOgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyBpbiByYW5nZShzZWxmLnBsYW5fbWF4X2ZhaWxfdGltZXMpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbF9jYWxscyA9IHNlbGYuY2hlY2tfcGF0aCh0b29sX2NhbGxzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9ucywgb2JzZXJ2YXRpb25zLCBzdWNjZXNzID0gc2VsZi5jYWxsX3Rvb2xzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM9dG9vbF9jYWxscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbl9tZXNzYWdlcyA9ICJbQWN0aW9uXTogIiArICI7Ii5qb2luKGFjdGlvbnMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbl9tZXNzYWdlcyA9ICJbT2JzZXJ2YXRpb25dOiAiICsgIjsiLmpvaW4oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicm9sZSI6ICJhc3Npc3RhbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IGFjdGlvbl9tZXNzYWdlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICIuICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBvYnNlcnZhdGlvbl9tZXNzYWdlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzdWNjZXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgdGhpbmtpbmdzID0gcmVzcG9uc2VfbWVzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsicm9sZSI6ICJhc3Npc3RhbnQiLCAiY29udGVudCI6IHRoaW5raW5nc30KICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBpZiBpID09IGxlbih3b3JrZmxvdykgLSAxOgogICAgICAgICAgICAgICAgICAgICAgICBmaW5hbF9yZXN1bHQgPSBzZWxmLm1lc3NhZ2VzWy0xXQoKICAgICAgICAgICAgICAgICAgICBzdGVwX3Jlc3VsdCA9IHNlbGYubWVzc2FnZXNbLTFdWyJjb250ZW50Il0KICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5sb2coZiJBdCBzdGVwIHtpICsgMX0sIHtzdGVwX3Jlc3VsdH1cbiIsIGxldmVsPSJpbmZvIikKCiAgICAgICAgICAgICAgICAgICAgc2VsZi5yb3VuZHMgKz0gMQoKICAgICAgICAgICAgICAgIHNlbGYuc2V0X3N0YXR1cygiZG9uZSIpCiAgICAgICAgICAgICAgICBzZWxmLnNldF9lbmRfdGltZSh0aW1lPXRpbWUudGltZSgpKQoKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgImFnZW50X25hbWUiOiBzZWxmLmFnZW50X25hbWUsCiAgICAgICAgICAgICAgICAgICAgInJlc3VsdCI6IGZpbmFsX3Jlc3VsdCwKICAgICAgICAgICAgICAgICAgICAicm91bmRzIjogc2VsZi5yb3VuZHMsCiAgICAgICAgICAgICAgICAgICAgImFnZW50X3dhaXRpbmdfdGltZSI6IHNlbGYuc3RhcnRfdGltZSAtIHNlbGYuY3JlYXRlZF90aW1lLAogICAgICAgICAgICAgICAgICAgICJhZ2VudF90dXJuYXJvdW5kX3RpbWUiOiBzZWxmLmVuZF90aW1lIC0gc2VsZi5jcmVhdGVkX3RpbWUsCiAgICAgICAgICAgICAgICAgICAgInJlcXVlc3Rfd2FpdGluZ190aW1lcyI6IHNlbGYucmVxdWVzdF93YWl0aW5nX3RpbWVzLAogICAgICAgICAgICAgICAgICAgICJyZXF1ZXN0X3R1cm5hcm91bmRfdGltZXMiOiBzZWxmLnJlcXVlc3RfdHVybmFyb3VuZF90aW1lcywKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICJhZ2VudF9uYW1lIjogc2VsZi5hZ2VudF9uYW1lLAogICAgICAgICAgICAgICAgICAgICJyZXN1bHQiOiAiRmFpbGVkIHRvIGdlbmVyYXRlIGEgdmFsaWQgd29ya2Zsb3cgaW4gdGhlIGdpdmVuIHRpbWVzLiIsCiAgICAgICAgICAgICAgICAgICAgInJvdW5kcyI6IHNlbGYucm91bmRzLAogICAgICAgICAgICAgICAgICAgICJhZ2VudF93YWl0aW5nX3RpbWUiOiBOb25lLAogICAgICAgICAgICAgICAgICAgICJhZ2VudF90dXJuYXJvdW5kX3RpbWUiOiBOb25lLAogICAgICAgICAgICAgICAgICAgICJyZXF1ZXN0X3dhaXRpbmdfdGltZXMiOiBzZWxmLnJlcXVlc3Rfd2FpdGluZ190aW1lcywKICAgICAgICAgICAgICAgICAgICAicmVxdWVzdF90dXJuYXJvdW5kX3RpbWVzIjogc2VsZi5yZXF1ZXN0X3R1cm5hcm91bmRfdGltZXMsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChlKQogICAgICAgICAgICByZXR1cm4ge30KICAgICAgICAKICAgIGRlZiBzbmFrZV90b19jYW1lbChzZWxmLCBzbmFrZV9zdHIpOgogICAgICAgIGNvbXBvbmVudHMgPSBzbmFrZV9zdHIuc3BsaXQoIl8iKQogICAgICAgIHJldHVybiAiIi5qb2luKHgudGl0bGUoKSBmb3IgeCBpbiBjb21wb25lbnRzKQoKICAgIGRlZiBsb2FkX3Rvb2xzKHNlbGYsIHRvb2xfbmFtZXMpOgogICAgICAgIGlmIHRvb2xfbmFtZXMgPT0gIk5vbmUiOgogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgZm9yIHRvb2xfbmFtZSBpbiB0b29sX25hbWVzOgogICAgICAgICAgICBvcmcsIG5hbWUgPSB0b29sX25hbWUuc3BsaXQoIi8iKQogICAgICAgICAgICBtb2R1bGVfbmFtZSA9ICIuIi5qb2luKFsicHlvcGVuYWdpIiwgInRvb2xzIiwgb3JnLCBuYW1lXSkKICAgICAgICAgICAgY2xhc3NfbmFtZSA9IHNlbGYuc25ha2VfdG9fY2FtZWwobmFtZSkKCiAgICAgICAgICAgIHRvb2xfbW9kdWxlID0gaW1wb3J0bGliLmltcG9ydF9tb2R1bGUobW9kdWxlX25hbWUpCiAgICAgICAgICAgIHRvb2xfY2xhc3MgPSBnZXRhdHRyKHRvb2xfbW9kdWxlLCBjbGFzc19uYW1lKQoKICAgICAgICAgICAgc2VsZi50b29sX2xpc3RbbmFtZV0gPSB0b29sX2NsYXNzKCkKICAgICAgICAgICAgdG9vbF9mb3JtYXQgPSB0b29sX2NsYXNzKCkuZ2V0X3Rvb2xfY2FsbF9mb3JtYXQoKQogICAgICAgICAgICBzZWxmLnRvb2xzLmFwcGVuZCh0b29sX2Zvcm1hdCkKICAgICAgICAgICAgc2VsZi50b29sX2luZm8uYXBwZW5kKAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogdG9vbF9mb3JtYXRbImZ1bmN0aW9uIl1bIm5hbWUiXSwKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB0b29sX2Zvcm1hdFsiZnVuY3Rpb24iXVsiZGVzY3JpcHRpb24iXSwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKQoKICAgIGRlZiBwcmVfc2VsZWN0X3Rvb2xzKHNlbGYsIHRvb2xfbmFtZXMpOgogICAgICAgIHByZV9zZWxlY3RlZF90b29scyA9IFtdCiAgICAgICAgZm9yIHRvb2xfbmFtZSBpbiB0b29sX25hbWVzOgogICAgICAgICAgICBmb3IgdG9vbCBpbiBzZWxmLnRvb2xzOgogICAgICAgICAgICAgICAgaWYgdG9vbFsiZnVuY3Rpb24iXVsibmFtZSJdID09IHRvb2xfbmFtZToKICAgICAgICAgICAgICAgICAgICBwcmVfc2VsZWN0ZWRfdG9vbHMuYXBwZW5kKHRvb2wpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgcmV0dXJuIHByZV9zZWxlY3RlZF90b29scwoKICAgIGRlZiBzZXR1cF9sb2dnZXIoc2VsZik6CiAgICAgICAgbG9nZ2VyID0gQWdlbnRMb2dnZXIoc2VsZi5hZ2VudF9uYW1lLCBzZWxmLmxvZ19tb2RlKQogICAgICAgIHJldHVybiBsb2dnZXIKCiAgICBkZWYgbG9hZF9jb25maWcoc2VsZik6CiAgICAgICAgc2NyaXB0X3BhdGggPSBvcy5wYXRoLmFic3BhdGgoX19maWxlX18pCiAgICAgICAgc2NyaXB0X2RpciA9IG9zLnBhdGguZGlybmFtZShzY3JpcHRfcGF0aCkKICAgICAgICBjb25maWdfZmlsZSA9IG9zLnBhdGguam9pbihzY3JpcHRfZGlyLCAiY29uZmlnLmpzb24iKQogICAgICAgIHdpdGggb3Blbihjb25maWdfZmlsZSwgInIiKSBhcyBmOgogICAgICAgICAgICBjb25maWcgPSBqc29uLmxvYWQoZikKICAgICAgICAgICAgcmV0dXJuIGNvbmZpZwoKICAgIGRlZiBzZXRfYWlkKHNlbGYsIGFpZCk6CiAgICAgICAgc2VsZi5haWQgPSBhaWQKCiAgICBkZWYgZ2V0X2FpZChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5haWQKCiAgICBkZWYgZ2V0X2FnZW50X25hbWUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuYWdlbnRfbmFtZQoKICAgIGRlZiBzZXRfc3RhdHVzKHNlbGYsIHN0YXR1cyk6CiAgICAgICAgIiIiCiAgICAgICAgU3RhdHVzIHR5cGU6IFdhaXRpbmcsIFJ1bm5pbmcsIERvbmUsIEluYWN0aXZlCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5zdGF0dXMgPSBzdGF0dXMKCiAgICBkZWYgZ2V0X3N0YXR1cyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5zdGF0dXMKCiAgICBkZWYgc2V0X2NyZWF0ZWRfdGltZShzZWxmLCB0aW1lKToKICAgICAgICBzZWxmLmNyZWF0ZWRfdGltZSA9IHRpbWUKCiAgICBkZWYgZ2V0X2NyZWF0ZWRfdGltZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5jcmVhdGVkX3RpbWUKCiAgICBkZWYgc2V0X3N0YXJ0X3RpbWUoc2VsZiwgdGltZSk6CiAgICAgICAgc2VsZi5zdGFydF90aW1lID0gdGltZQoKICAgIGRlZiBnZXRfc3RhcnRfdGltZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5zdGFydF90aW1lCgogICAgZGVmIHNldF9lbmRfdGltZShzZWxmLCB0aW1lKToKICAgICAgICBzZWxmLmVuZF90aW1lID0gdGltZQoKICAgIGRlZiBnZXRfZW5kX3RpbWUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZW5kX3RpbWU="""

# Save as JSON
save_file_from_base64(b64_str, "agent.py")
